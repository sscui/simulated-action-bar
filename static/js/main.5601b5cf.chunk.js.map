{"version":3,"sources":["components/interface.ts","reportWebVitals.js","components/ActionBar/index.tsx","MyApp.tsx","index.js"],"names":["CAMP","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ActionBar","camps","setCamps","shikigamis","setShikigamis","className","map","shikigami","index","color","style","left","position","zIndex","Math","floor","camp","backgroundColor","name","ghost","nextAddGhost","nowPosition","onClick","minCompleteTime","min","apply","item","completeTime","newShikigami","campKey","campChange","speed","marginTop","defaultCamps","BLUE","RED","defaultShikigami","MyApp","useState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5601b5cf.chunk.js","sourcesContent":["export interface IShikigami {\r\n  name: string;\r\n  speed: number;\r\n  completeTime: number;\r\n  camp: CAMP;\r\n  position: number;\r\n}\r\n\r\nexport enum CAMP {\r\n  RED = 0,\r\n  BLUE = 1\r\n}\r\n\r\n// export interface ICamp {\r\n//   type: CAMP;\r\n//   ghost: number;\r\n//   nextAddGhost: 3 | 4 | 5;\r\n//   nowPosition: number;\r\n// }\r\nexport type ICamp = {\r\n  [type in CAMP]: {\r\n    ghost: number;\r\n    nextAddGhost: 3 | 4 | 5;\r\n    nowPosition: number;\r\n  };\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport { CAMP, ICamp, IShikigami } from '../interface';\r\nimport \"./index.css\";\r\ninterface IProps {\r\n  camps: ICamp;\r\n  setCamps: (camps: ICamp) => void;\r\n  shikigamis: IShikigami[],\r\n  setShikigamis: (camps: IShikigami[]) => void;\r\n}\r\n\r\n\r\nexport const ActionBar: React.FC<IProps> = ({ camps, setCamps, shikigamis, setShikigamis }) => {\r\n  const campChange = (campKey: CAMP) => {\r\n    camps[campKey].nowPosition++;\r\n    if (camps[campKey].nowPosition > 5) {\r\n      camps[campKey].nowPosition -= 5;\r\n      let nextAddGhost = camps[campKey].nextAddGhost;\r\n      let ghost = camps[campKey].ghost + nextAddGhost;\r\n      camps[campKey].ghost = ghost > 8 ? 8 : ghost;\r\n      camps[campKey].nextAddGhost = nextAddGhost === 5 ? 5 : nextAddGhost + 1 as 4 | 5;\r\n      setCamps(camps);\r\n    }\r\n  }\r\n\r\n  // const changeActionBar = (nums: number, indexSet: number[]) => {\r\n\r\n  // }\r\n\r\n  const handleClick = () => {\r\n    const minCompleteTime = Math.min.apply(Math, shikigamis.map(item => item.completeTime));\r\n    const newShikigami = shikigamis.map((item) => {\r\n      if (item.completeTime === minCompleteTime) {\r\n        campChange(item.camp);\r\n      }\r\n      const completeTime = item.completeTime - minCompleteTime || 100 / item.speed;\r\n      const position = item.completeTime === minCompleteTime ? 100 : (item.position + item.speed * minCompleteTime) % 100;\r\n\r\n      return {\r\n        ...item,\r\n        position,\r\n        completeTime,\r\n      }\r\n    })\r\n    setShikigamis(newShikigami);\r\n  }\r\n  return (\r\n    <div className=\"ActionBarContainer\">\r\n      <div className=\"ActionBar\">\r\n        <span>{'0'}</span>\r\n        <span>{'100'}</span>\r\n      </div>\r\n      <div className=\"ShikigamiPosition\">\r\n        {shikigamis.map((shikigami, index) => {\r\n          const color = ['lightpink', 'lightblue']\r\n          return <div key={shikigami.name} className=\"ShikigamiPositionContainer\" style={{ left: `calc(${shikigami.position}% - 50px)`, zIndex: Math.floor(shikigami.position) }}>\r\n            <div style={{ color: `${color[shikigami.camp]}` }}>{\"|\"}</div>\r\n            <div className=\"ShikigamiDetail\" style={{ backgroundColor: `${color[shikigami.camp]}` }}>\r\n              <div>{shikigami.name}</div>\r\n              <div> {`剩余 ${camps[shikigami.camp].ghost} 火`}</div>\r\n              <div> {camps[shikigami.camp].nextAddGhost}</div>\r\n              <div> {camps[shikigami.camp].nowPosition}</div>\r\n            </div>\r\n          </div>\r\n        })}\r\n      </div>\r\n      <button onClick={handleClick} style={{ marginTop: '200px' }}>{`开始跑条`}</button>\r\n    </div>\r\n  );\r\n} ","import React, { useState } from 'react';\r\nimport { ActionBar } from './components/ActionBar';\r\nimport { CAMP, ICamp } from './components/interface';\r\n// type: CAMP;\r\n//   shikigami: IShikigami[];\r\n//   ghost: number;\r\n// export interface IShikigami {\r\n//   name: string;\r\n//   speed: number;\r\n//   camp: CAMP;\r\n// }\r\n// const defaultCamps: ICamp[] = [{\r\n//   CAMP.BLUE,\r\n//   ghost: 4,\r\n//   nowPosition: 0,\r\n//   nextAddGhost: 3,\r\n// }, {\r\n//   type: CAMP.RED,\r\n//   ghost: 4,\r\n//   nowPosition: 0,\r\n//   nextAddGhost: 3,\r\n// }]\r\n\r\n\r\nconst defaultCamps: ICamp = {\r\n  [CAMP.BLUE]: {\r\n    ghost: 4,\r\n    nowPosition: 0,\r\n    nextAddGhost: 3,\r\n  },\r\n  [CAMP.RED]: {\r\n    ghost: 4,\r\n    nowPosition: 0,\r\n    nextAddGhost: 3,\r\n  }\r\n}\r\n\r\nconst defaultShikigami = [{\r\n  name: \"blue1\",\r\n  speed: 145,\r\n  camp: CAMP.BLUE,\r\n  position: 0,\r\n  completeTime: 100 / 145,\r\n}, {\r\n  name: \"blue2\",\r\n  speed: 211,\r\n  camp: CAMP.BLUE,\r\n  position: 0,\r\n  completeTime: 100 / 211,\r\n}, {\r\n  name: \"blue3\",\r\n  speed: 109,\r\n  camp: CAMP.BLUE,\r\n  position: 0,\r\n  completeTime: 100 / 109,\r\n}, {\r\n  name: \"red1\",\r\n  speed: 198,\r\n  camp: CAMP.RED,\r\n  position: 0,\r\n  completeTime: 100 / 198,\r\n}, {\r\n  name: \"red2\",\r\n  speed: 157,\r\n  camp: CAMP.RED,\r\n  position: 0,\r\n  completeTime: 100 / 157,\r\n}, {\r\n  name: \"red3\",\r\n  speed: 123,\r\n  camp: CAMP.RED,\r\n  position: 0,\r\n  completeTime: 100 / 123,\r\n}]\r\n\r\nexport const MyApp: React.FC<{}> = () => {\r\n  const [camps, setCamps] = useState(defaultCamps);\r\n  const [shikigamis, setShikigamis] = useState(defaultShikigami)\r\n  return <ActionBar camps={camps} setCamps={setCamps} shikigamis={shikigamis} setShikigamis={setShikigamis} />\r\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { MyApp } from './MyApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}